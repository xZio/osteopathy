/**
 * –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram
 */

const API_BASE = import.meta.env.VITE_API_URL || 'http://localhost:4000';

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram –∫–∞–Ω–∞–ª
 * @param {string} message - –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
 * @param {string} source - –ò—Å—Ç–æ—á–Ω–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏—è (–¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è)
 * @returns {Promise<boolean>} - true –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ, false –µ—Å–ª–∏ –æ—à–∏–±–∫–∞
 */
export async function sendToTelegram(message, source = "Unknown") {
  try {
    const response = await fetch(`${API_BASE}/notifications/telegram`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ text: message }),
    });

    if (response.ok) {
      return true;
    } else {
      console.error(
        `‚ùå ${source}: –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:`,
        response.status
      );
      return false;
    }
  } catch (error) {
    console.error(`‚ùå ${source}: –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram:`, error);
    return false;
  }
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram
 * @param {Object} formData - –î–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã
 * @param {string} formType - –¢–∏–ø —Ñ–æ—Ä–º—ã ("contacts" –∏–ª–∏ "callback")
 * @returns {string} - –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
 */
export function formatFormMessage(formData, formType = "contacts") {
  const emoji = formType === "contacts" ? "üÜï" : "üìû";
  const title =
    formType === "contacts"
      ? "–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å —Å —Å–∞–π—Ç–∞"
      : "–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å –∏–∑ Callback —Ñ–æ—Ä–º—ã";

  return `
${emoji} ${title}

üë§ –ò–º—è: ${formData.name}
üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${formData.phone}
üìÖ –î–∞—Ç–∞: ${formData.date}
üïê –í—Ä–µ–º—è: ${formData.time}
${formData.message ? `üìù –°–æ–æ–±—â–µ–Ω–∏–µ: ${formData.message}` : ""}

‚è∞ –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏: ${new Date().toLocaleString("ru-RU")}
  `;
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã –≤ Telegram
 * @param {Object} formData - –î–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã
 * @param {string} formType - –¢–∏–ø —Ñ–æ—Ä–º—ã ("contacts" –∏–ª–∏ "callback")
 * @returns {Promise<boolean>} - true –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ, false –µ—Å–ª–∏ –æ—à–∏–±–∫–∞
 */
export async function sendFormToTelegram(formData, formType = "contacts") {
  const message = formatFormMessage(formData, formType);
  return await sendToTelegram(message, formType);
}
